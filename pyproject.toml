[tool.poetry]
name = "DeBERTa"
version = "0.1.0" # Update this based on your VERSION file or other logic
description = "Decoding enhanced BERT with Disentangled Attention"
authors = ["penhe <penhe@microsoft.com>"]
license = "MIT"
readme = "README.md" # This will not include dynamic git version info
repository = "https://github.com/microsoft/DeBERTa"
keywords = ["NLP", "deep learning", "transformer", "pytorch", "Attention", "BERT", "RoBERTa", "DeBERTa"]
packages = [
    { include = "DeBERTa", from = "." },
]

[tool.poetry.dependencies]
python = "^3.9"
torch = "~2.1.1"
sentencepiece = "^0.1.99"
numpy = "^1.26"
regex = "^2023.10"
psutil = "^5.9"
tqdm = "^4.66"
scipy = "^1.11"
ujson = "^5.9"
seqeval = "^1.2"
scikit-learn = "^1.3"
spacy = "^3.7"
nltk = "^3.8"
requests = "^2.31.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4"

#[tool.poetry.group.docs.dependencies]
#recommonmark = "*"
#sphinx = "*"
#sphinx-markdown-tables = "*"
#sphinx-rtd-theme = "*"

[tool.ruff]
line-length = 120
indent-width = 4
src = ["src"]
target-version = "py38"
ignore = [
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments in function definition
    "PLR0915",  # Too many statements
    "E501",  # Line too long
    "RUF001",  # String contains ambiguous `ノ` (KATAKANA LETTER NO). Did you mean `/` (SOLIDUS)?
    "RUF002",  # Docstring contains ambiguous `，` (FULLWIDTH COMMA). Did you mean `,` (COMMA)?
    "RUF003",  # Comment contains ambiguous `（` (FULLWIDTH LEFT PARENTHESIS). Did you mean `(` (LEFT PARENTHESIS)?
    "COM812",  # Trailing comma missing
    "PLR2004",  # Magic value used in comparison
    "D100",  # Missing docstring in public module
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in `__init__`
    "D301",  # Use `r"""` if any backslashes in a docstring
    "D403",  # First word of the first line should be properly capitalized
    "D415",  # First line should end with a period, question mark, or exclamation point
    "ANN002",  # Missing type annotation for `*args`
    "ANN003",  # Missing type annotation for `**kwargs`
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "F403",
    "F405",
    "E741",
]
select = ["F", "E", "W", "I", "B", "PL", "PD", "NPY", "RUF", "UP", "COM", "PT", "PYI"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
